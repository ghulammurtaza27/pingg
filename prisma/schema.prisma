generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String
  preferences        UserPreferences?
  organizationalGoals String?
  accounts           Account[]
  sessions           Session[]
  agents             Agent[]
  requests           Request[]
  knowledgeBaseQuestions KnowledgeBaseQuestion[]
  notifications      Notification[]
  gmailIntegrated  Boolean?  @default(false)
  gmailAccessToken String?
  gmailRefreshToken String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id        String    @id @default(cuid())
  name      String
  type      String
  status    String?
  isDefault Boolean   @default(false)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sentRequests     Request[] @relation("SenderAgent")
  receivedRequests Request[] @relation("RecipientAgent")
  knowledgeBaseQuestions KnowledgeBaseQuestion[]
  knowledgeBases KnowledgeBase[]
  
  @@unique([userId, type], name: "userIdType")
}

model Request {
  id               String   @id @default(cuid())
  summary          String   @db.Text
  considerations   String   @db.Text
  relevanceScore   Float    @default(0)    // Score from 0-1 measuring relevance against recipient's knowledge base
  status           String   @default("pending") // pending, accepted, rejected, completed
  senderAgentId    String
  recipientAgentId String
  userId           String
  senderName       String?  // Add this field, make it optional with String?
  response         String?  @db.Text  // Response from recipient agent
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  senderAgent      Agent    @relation("SenderAgent", fields: [senderAgentId], references: [id])
  recipientAgent   Agent    @relation("RecipientAgent", fields: [recipientAgentId], references: [id])
  notification     Notification?
  analysis         RequestAnalysis?

  @@index([recipientAgentId])
  @@index([senderAgentId])
}

model KnowledgeBaseQuestion {
  id            String   @id @default(cuid())
  question      String   @db.Text
  answer        String?  @db.Text
  difficulty    Int
  points        Int
  score         Int?
  pointsEarned  Int?
  agentId       String
  userId        String
  agent         Agent    @relation(fields: [agentId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([agentId])
  @@index([userId])
}

// ... existing models remain the same ...

model KnowledgeBase {
  id              String                        @id @default(cuid())
  agentId         String
  agent           Agent                         @relation(fields: [agentId], references: [id])
  industry        String
  useCase         String
  mainGoals       String[]
  entries         KnowledgeBaseEntry[]
  coalesced       Boolean                       @default(false)
  coalescedSummary KnowledgeBaseCoalescedSummary?
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
}

model KnowledgeBaseCoalescedSummary {
  id                String        @id @default(cuid())
  knowledgeBaseId   String        @unique
  knowledgeBase     KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  summary           String        @db.Text
  capabilities      String[]
  useCases          String[]
  limitations       String[]
  additionalContext String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// KnowledgeBaseEntry model remains the same

model KnowledgeBaseEntry {
  id              String        @id @default(cuid())
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id])
  question        String
  answer          String
  source          String        @default("manual")
  sourceId        String?
  orderIndex      Int          @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([knowledgeBaseId])
  @@index([orderIndex])
}

model RequestAnalysis {
  id          String   @id @default(cuid())
  content     String   @db.Text
  generatedAt DateTime @default(now())
  request     Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String   @unique
}

model Notification {
  id        String   @id @default(cuid())
  requestId String   @unique
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  darkMode           Boolean @default(true)
  language           String  @default("en")
  
  @@index([userId])
}



